{"version":3,"file":"static/js/996.a2e289b0.chunk.js","mappings":"sLAGA,MAAMA,EAAgBC,GAGT,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,OAGzBC,EAAW,CACf,QACA,QACA,cACA,iDACA,2BACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,MACA,QACA,gCACA,cACA,WA6DF,EAxCkBC,KAChB,MAGOC,EAAKC,IAAcC,EAAAA,EAAAA,UAAS,IAC5BC,EAASC,IAAiBF,EAAAA,EAAAA,UAASJ,EAASE,KAC5CK,EAAMC,IAAcJ,EAAAA,EAAAA,UAASJ,EAASE,GAAKH,SAC3CU,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,GAkBzC,MA3CkBO,EAACC,EAAUC,KAC7B,MAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,KACRF,EAAcG,QAAUL,CAAQ,GAC/B,CAACA,KAEJI,EAAAA,EAAAA,YAAU,KACR,GAAIH,EAAO,CACT,MAAMK,EAAKC,aAAY,KACrBL,EAAcG,SAAS,GACtBJ,GACH,MAAO,IAAMO,cAAcF,EAC7B,CACA,MAAO,MAAQ,GACd,CAACL,GAAO,EAYXF,EAAY,KACV,IAAIU,EAASnB,EACToB,EAAUf,EACVA,EAXO,IAWQP,EAASE,GAAKH,SAC/BsB,GAAU,EACVC,EAAU,GAERD,IAAWrB,EAASD,OACtBW,GAAY,IAEZJ,EAAcN,EAASqB,GAAQE,MAAM,EAAGD,IACxCnB,EAAWkB,GACXb,EAAWc,EAAU,GACvB,GACCb,EArBW,GAqBQ,OAGpBe,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,MAAO9B,EAAaS,GAAW,CAAC,EAAI,CAAEsB,MAAO,OAC7CC,aAAcA,IAAMlB,GAAY,GAChCmB,aAAcA,IAAO3B,EAAMF,EAASD,QAAWW,GAAY,GAAMoB,UAEjEC,EAAAA,EAAAA,MAAA,KAAGC,KAAMpC,EAAaS,GAAQ,UAAA4B,OAAa5B,EAAO,mBAAoB,GAAGyB,SAAA,EACvEN,EAAAA,EAAAA,KAAA,QAAAM,SAAOzB,KACPmB,EAAAA,EAAAA,KAAA,QAAAM,SAAM,wBAEJ,E,cC7EV,MAoBA,EApBgBI,KACdV,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,iDAAgDP,UAE5DC,EAAAA,EAAAA,MAAA,WAASN,UAAU,OAAOP,GAAG,UAASY,SAAA,EACpCN,EAAAA,EAAAA,KAAA,UAAAM,UACEN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOK,UACpBN,EAAAA,EAAAA,KAAA,MAAI,cAAY,UAASM,UAACN,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACC,GAAG,WAAUT,SAAC,mBAGlDC,EAAAA,EAAAA,MAAA,OAAKN,UAAU,WAAUK,SAAA,EACvBN,EAAAA,EAAAA,KAAA,KAAAM,SAAG,sDACHN,EAAAA,EAAAA,KAACvB,EAAS,QAEZuB,EAAAA,EAAAA,KAACgB,EAAAA,EAAY,Q","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n  // eslint-disable-next-line no-useless-escape\r\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n  return re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\r\n  'jacob',\r\n  'j-cub',\r\n  'hello there',\r\n  'you can email me at literally anything! Really',\r\n  'anything you can imagine',\r\n  'well, not anything. But most things',\r\n  'like-this',\r\n  'or-this',\r\n  'but not this :(  ',\r\n  'you.can.also.email.me.with.specific.topics.like',\r\n  'just-saying-hi',\r\n  'please-work-for-us',\r\n  '...',\r\n  'S.O.S',\r\n  'or I-really-like-your-website',\r\n  'still here?',\r\n  'thanks!',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = () => {\r\n  const hold = 50; // ticks to wait after message is complete before rendering next message\r\n  const delay = 50; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(messages[idx].length); // points to current char\r\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(() => {\r\n    let newIdx = idx;\r\n    let newChar = char;\r\n    if (char - hold >= messages[idx].length) {\r\n      newIdx += 1;\r\n      newChar = 0;\r\n    }\r\n    if (newIdx === messages.length) {\r\n      setIsActive(false);\r\n    } else {\r\n      updateMessage(messages[newIdx].slice(0, newChar));\r\n      updateIter(newIdx);\r\n      updateChar(newChar + 1);\r\n    }\r\n  }, isActive ? delay : null);\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={validateText(message) ? {} : { color: 'red' }}\r\n      onMouseEnter={() => setIsActive(false)}\r\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\r\n    >\r\n      <a href={validateText(message) ? `mailto:${message}@jacobkeller.io` : ''}>\r\n        <span>{message}</span>\r\n        <span>@jacobkeller.io</span>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\nimport EmailLink from '../components/Contact/EmailLink';\r\nimport ContactIcons from '../components/Contact/ContactIcons';\r\n\r\nconst Contact = () => (\r\n  <Main\r\n    title=\"Contact\"\r\n    description=\"Contact Jacob via email @ jacob@jacobkeller.io\"\r\n  >\r\n    <article className=\"post\" id=\"contact\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\r\n        </div>\r\n      </header>\r\n      <div className=\"email-at\">\r\n        <p>Feel free to get in touch. You can email me at: </p>\r\n        <EmailLink />\r\n      </div>\r\n      <ContactIcons />\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["validateText","text","test","length","messages","EmailLink","idx","updateIter","useState","message","updateMessage","char","updateChar","isActive","setIsActive","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","newIdx","newChar","slice","_jsx","className","style","color","onMouseEnter","onMouseLeave","children","_jsxs","href","concat","Contact","Main","title","description","Link","to","ContactIcons"],"sourceRoot":""}