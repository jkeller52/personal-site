{"version":3,"file":"static/js/479.45710e98.chunk.js","mappings":"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","sources":["../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/ccount/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/mdast-util-to-markdown/lib/util/association.js","../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/util/safe.js","../node_modules/mdast-util-to-markdown/lib/util/track.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/remark-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n"],"names":["splice","list","start","remove","items","end","length","parameters","chunkStart","Array","from","unshift","slice","hasOwnProperty","syntaxExtension","all","extension","hook","left","call","undefined","right","code","value","constructs","isArray","existing","index","before","add","push","asciiAlpha","regexCheck","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","String","fromCharCode","wwwPrefix","tokenize","effects","ok","nok","size","wwwPrefixInside","consume","wwwPrefixAfter","partial","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","trail","domainAfter","domainAtPunctuation","path","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","after","wwwAutolink","self","this","previousWww","previous","previousUnbalanced","events","enter","attempt","wwwAfter","exit","protocolAutolink","buffer","previousProtocol","fromCodePoint","protocolPrefixInside","protocol","toLowerCase","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","data","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","text","gfmAutolinkLiteral","result","token","type","_balanced","_gfmAutolinkLiteralWalkedInto","factorySpace","max","limit","Number","POSITIVE_INFINITY","prefix","blankLine","normalizeIdentifier","replace","toUpperCase","indent","tail","sliceSerialize","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","now","codePointAt","includes","resolveToPotentialGfmFootnoteCall","context","Object","assign","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","classifyCharacter","resolveAll","called","resolve","gfmStrikethrough","options","single","singleTilde","tokenizer","more","_open","Boolean","_close","open","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","constructor","map","editMap","at","addImpl","sort","a","b","vecs","pop","gfmTableAlign","inDelimiterRow","align","event","alignIndex","gfmTable","flow","sizeB","next","bodyRowStart","headRowBefore","lazy","line","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","table","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfmTaskListItem","gfm","extensions","combineExtensions","document","continuation","resolveTo","ccount","character","source","TypeError","count","indexOf","convert","castFactory","node","typeFactory","tests","checks","any","_len","arguments","_key","anyFactory","key","propsFactory","Error","_len2","_key2","CONTINUE","EXIT","visitParents","tree","visitor","reverse","is","step","factory","parents","name","tagName","defineProperty","visit","subresult","grandparents","toResult","children","concat","own","findAndReplace","find","settings","schema","RegExp","ignored","ignore","pairs","toExpression","toFunction","toPairs","pairIndex","grandparent","parent","change","nodes","lastIndex","match","exec","position","matchObject","input","stack","global","handler","escape","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","title","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","config","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","unsafe","_","parts","split","isCorrectDomain","trailExec","closingParenIndex","openingParens","closingParens","splitUrl","label","email","charCodeAt","element","createElement","characterEscapeOrReference","decode","$0","$1","$2","head","hex","base","parseInt","decodeNumericCharacterReference","characterReference","innerHTML","char","textContent","decodeNamedCharacterReference","association","between","state","join","repeat","eol","patternCompile","pattern","_compiled","atBreak","patternInScope","listInScope","none","safe","positions","infos","expression","numerical","escapeBackslashes","charAt","encode","toString","results","whole","track","lineShift","move","chunks","current","shift","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","tracker","subexit","footnoteDefinition","one","indentLines","info","indexStack","createTracker","child","handle","bulletLastUsed","containerFlow","blank","containerPhrasing","handlers","peek","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","inlineCode","sequence","defaultStringLength","toAlignment","gfmTableFromMarkdown","d","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","Math","lines","delimiterStart","delimiterEnd","markdownTable","listItem","listItemIndent","style","checkListItemIndent","bullet","bulletCurrent","checkBullet","ordered","incrementListMarker","spread","ceil","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","checked","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","field","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown"],"sourceRoot":""}